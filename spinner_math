import matplotlib as mplot
import matplotlib.pyplot as pyplot
import math

# spin_number = 5
# spin_num = 20

results_list = []

def spin_add(num_1, num_2, spin_num):
    return (num_1 + num_2) % spin_num

def spin_mult(num_1, num_2, spin_num):
    return (num_1 * num_2) % spin_num


def test(spin_num):
    associative_mult_exceptions = 0
    distributive_exceptions = 0

    for a in range(0, spin_num):
        for b in range(0, spin_num):
            for c in range(0, spin_num):
                # if not test_associative_mult(a, b, c, spin_num, False):
                #     associative_mult_exceptions += 1

                if not test_distributive(a, b, c, spin_num, False):
                    distributive_exceptions += 1


    if associative_mult_exceptions > 0:
        print("multiplicative associate property at spin", spin_num,":", associative_mult_exceptions)
        return

    else:
        print("multiplicative associate property at spin", spin_num,"-", "None")

    if distributive_exceptions > 0:
        print("multiplicative associate property at spin", spin_num,":", distributive_exceptions)
        return

    else:
        print("multiplicative associate property at spin", spin_num,"-", "None")

def test_single(spin_num):
    associative_mult_exceptions = 0
    distributive_exceptions = 0

    for a in range(spin_num):
        for b in range(spin_num):
            if test_associative_add(a, b, spin_num):
                print("how did associative fail lol")
                break
            for c in range(spin_num):
                if not test_associative_mult(a, b, c, spin_num, True):
                    associative_mult_exceptions += 1

                if not test_distributive(a, b, c, spin_num, True):
                    distributive_exceptions += 1

    if associative_mult_exceptions > 0:
        print("multiplicative associate property at spin", spin_num,":", associative_mult_exceptions)

    else:
        print("multiplicative associate property at spin", spin_num,"-", "None")

    if distributive_exceptions > 0:
        print("distributive property at spin", spin_num,":", distributive_exceptions)

    else:
        print("distributive associate property at spin", spin_num,"-", "None")

def test_distributive(a, b, c, spin_num, print_data):
    value_1 = spin_mult(a, spin_add(b, c, spin_num), spin_num)
    value_2 = spin_add(spin_mult(a, b, spin_num), spin_mult(a, c, spin_num), spin_num)

    if print_data:
        print("Value 1 (a , b + c) =", value_1, "Value 2 (a * b, a * c) =", value_2)
        print("Calculation:")
        print("spin_mult({a1}, {b1} + {c1}) = {value1} : spin_mult({a1}, {b1}) ++ spin_mult({a1}, {c1}) = {midcalc1} + {midcalc2} = {value2}".format(a1 = a, b1 = b, c1 = c, value1 = value_1, value2 = value_2, midcalc1 = spin_mult(a, b, spin_num), midcalc2 = spin_mult(a, c, spin_num)))


    if value_1 == value_2:
        if print_data:
            print("Distributive Success at", a, b, c, "Spin Number", spin_num)
            print("----------------------------------------------------")
        
        return True

    if print_data:
        print("Distributive Failure at", a, b, c, "Spin Number", spin_num)
        print("----------------------------------------------------")
        
    return False

def test_associative_mult(a, b, c, spin_num, print_data):
    if spin_mult(a, (spin_mult(b, c, spin_num)), spin_num) == spin_mult(spin_mult(a, b, spin_num), c, spin_num):
        return True
    print("Multiplicative Associative Failure at", a, b, c, "Spin Number", spin_num)
    return False

def test_associative_add(a, b, spin_num, print_data):
    value_1 = spin_add(a, b, spin_num)
    value_2 = spin_add(b, a, spin_num)

    if value_1 == value_2:
        return True
    print("Additive Associative Failure at", a, b, "Spin Number", spin_num)
    return False

def find_inverse(a, spin_num):
    for i in range(0, spin_num):
        if spin_mult(a, i, spin_num) == 1:
            print("inverse of", a, "is:", i, "at spin number", spin_num)

def find_value(spin_num):
    for a in range(0, spin_num):
        find_inverse(a, spin_num)

# for i in range(1, 13):
#     if i != 0:
#         find_value(i)

find_value(17)

# for i in range(2, 50):
#     test(i)

# for i in range(200):
#     results_list.append(spin_mult(i, 2))

# pyplot.plot(results_list)
# pyplot.show()
