spin_num = 4

def spin_add(a, b):
    return (a + b) % spin_num

def spin_mult(a, b):
    return (a * b) % spin_num

def test_add_identity():
    identities_found = 0
    for a in range(spin_num):
        for b in range(spin_num):
            if spin_add(a, b) == a:
                # print("Additive identity found for", a, "using b value of", b, "at spin", spin_num)
                identities_found += 1
                continue
    if identities_found == spin_num:
        return True
    else:
        return False

def test_mult_idenity():
    identities_found = 0
    for a in range(spin_num):
        for b in range(spin_num):
            if spin_mult(a, b) == a:
                identities_found += 1
                continue
    if identities_found == spin_num:
        return True
    else:
        return False

def test_mult_inverse():
    inverses_found = 0
    for a in range(1, spin_num):
        for b in range(1, spin_num):
            if spin_mult(a, b) == 1:
                inverses_found += 1
                print(spin_num, "- inverse found for", a, "using", b, ": A - x value -", spin_num - b)
                continue

        
    if inverses_found == spin_num - 1:
        # print(spin_num, "- all inverses found")
        return True
    else:
        return False

def test_distributive(a, b, c):
    val_1 = spin_add(spin_mult(a, b), spin_mult(a, c))
    val_2 = spin_mult(a, spin_add(b, c))
    
    if val_1 == val_2:
        return True
    return False

def test_associative_mult(a, b, c):
    val_1 = spin_mult(a, spin_mult(b, c))
    val_2 = spin_mult(spin_mult(a, b), c)

    if val_1 == val_2:
        return True
    return False

def test_associative_add(a, b, c):
    val_1 = spin_add(a, spin_add(b, c))
    val_2 = spin_add(spin_add(a, b), c)

    if val_1 == val_2:
        return True
    return False


def test_equality_fields():
    num_distributive_exceptions = 0
    num_associative_add_exceptions = 0
    num_associative_mult_exceptions = 0

    for a in range(spin_num):
        for b in range(spin_num):
            for c in range(spin_num):
                if not test_distributive(a, b, c):
                    num_distributive_exceptions += 1
                if not test_associative_mult(a, b, c):
                    num_associative_mult_exceptions += 1
                if not test_associative_add(a, b, c):
                    num_associative_add_exceptions += 1

    if num_distributive_exceptions == 0:
        print("No distributive fails for spin num", spin_num)
    else:
        print(num_distributive_exceptions, "multiplicative associative fails for spin num", spin_num)

    if num_associative_mult_exceptions == 0:
        print("No multiplicative associative fails for spin num", spin_num)
    else:
        print(num_associative_mult_exceptions, "mutiplicative associative fails for spin num", spin_num)
    
    if num_associative_add_exceptions == 0:
        print("No additive associative fails for spin num", spin_num)
    else:
        print(num_distributive_exceptions, "additive associative fails for spin num", spin_num)

    print("------------------------------------------------------------------------------------------")

def check_for_divisibility(a, b, c, w):
    if (a + b * w) % c == 0:
        print("divisible with:", a, "+", b, "* w /", c, "using w =", w)
        return True


# for i in range(100):
#     spin_num = i
#     if test_mult_inverse():
#         print("All inverses found at spin val", spin_num)
#     else:
#         # print("")
#         # print("SOMETHING DIDN'T WORK")
#         # print("--------------------------------------------------")
#         # print("test failure at spin val", spin_num)
#         # print("--------------------------------------------------")
#         # print("")
#         print("FAILURE - spin num", spin_num)

print("")
print("Start Test")
print("--------------------------------------------------------------------------------------------------------")

b = 6
a = b - 1
c = 6
a = 9

# print("divising with", a, b, c)
# for g in range (100):
#     b = 100 - g
#     a = b - 1
#     for i in range(100000):
#         if check_for_divisibility(a, b, c, i):
#             break
#     print("completed")

for i in range(100000):
    if check_for_divisibility(a, b, c, i):
        break
print("completed")


# for i in range(1, 20):
#     spin_num = i
#     test_mult_inverse()
#     print("--------------------------------------------------------------------------------------------------------")
